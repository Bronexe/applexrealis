// Script para diagnosticar por qu√© la app sigue usando localhost:3000
// Ejecutar con: node scripts/diagnose-localhost-issue.js

require('dotenv').config({ path: '.env.local' })

function diagnoseLocalhostIssue() {
  console.log('üîç DIAGN√ìSTICO: ¬øPor qu√© la app sigue usando localhost:3000?')
  console.log('='.repeat(60))

  // 1. Verificar variables de entorno
  console.log('\n1. üìã VERIFICANDO VARIABLES DE ENTORNO:')
  const envVars = {
    'NEXT_PUBLIC_APP_URL': process.env.NEXT_PUBLIC_APP_URL,
    'VERCEL_URL': process.env.VERCEL_URL,
    'NODE_ENV': process.env.NODE_ENV,
    'VERCEL_ENV': process.env.VERCEL_ENV
  }

  Object.entries(envVars).forEach(([key, value]) => {
    if (value) {
      console.log(`   ‚úÖ ${key}: ${value}`)
    } else {
      console.log(`   ‚ùå ${key}: NO CONFIGURADA`)
    }
  })

  // 2. Verificar archivos de configuraci√≥n
  console.log('\n2. üìÅ VERIFICANDO ARCHIVOS DE CONFIGURACI√ìN:')
  
  const fs = require('fs')
  const path = require('path')

  // Verificar next.config.mjs
  try {
    const nextConfig = fs.readFileSync('next.config.mjs', 'utf8')
    if (nextConfig.includes('localhost:3000')) {
      console.log('   ‚ùå next.config.mjs contiene localhost:3000')
    } else {
      console.log('   ‚úÖ next.config.mjs no contiene localhost:3000')
    }
  } catch (error) {
    console.log('   ‚ö†Ô∏è  No se pudo leer next.config.mjs')
  }

  // Verificar middleware.ts
  try {
    const middleware = fs.readFileSync('middleware.ts', 'utf8')
    if (middleware.includes('localhost:3000')) {
      console.log('   ‚ùå middleware.ts contiene localhost:3000')
    } else {
      console.log('   ‚úÖ middleware.ts no contiene localhost:3000')
    }
  } catch (error) {
    console.log('   ‚ö†Ô∏è  No se pudo leer middleware.ts')
  }

  // 3. Buscar referencias hardcodeadas
  console.log('\n3. üîç BUSCANDO REFERENCIAS HARDCODEADAS:')
  
  const searchPatterns = [
    'localhost:3000',
    'http://localhost:3000',
    'https://localhost:3000',
    '127.0.0.1:3000'
  ]

  searchPatterns.forEach(pattern => {
    try {
      const { execSync } = require('child_process')
      const result = execSync(`grep -r "${pattern}" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.log"`, { encoding: 'utf8' })
      if (result.trim()) {
        console.log(`   ‚ùå Encontrado "${pattern}" en:`)
        result.split('\n').forEach(line => {
          if (line.trim()) {
            console.log(`      ${line}`)
          }
        })
      } else {
        console.log(`   ‚úÖ No se encontr√≥ "${pattern}"`)
      }
    } catch (error) {
      console.log(`   ‚úÖ No se encontr√≥ "${pattern}"`)
    }
  })

  // 4. Verificar configuraci√≥n de Supabase
  console.log('\n4. üîß VERIFICANDO CONFIGURACI√ìN DE SUPABASE:')
  
  try {
    const supabaseClient = fs.readFileSync('lib/supabase/client.ts', 'utf8')
    if (supabaseClient.includes('localhost:3000')) {
      console.log('   ‚ùå lib/supabase/client.ts contiene localhost:3000')
    } else {
      console.log('   ‚úÖ lib/supabase/client.ts no contiene localhost:3000')
    }
  } catch (error) {
    console.log('   ‚ö†Ô∏è  No se pudo leer lib/supabase/client.ts')
  }

  // 5. Verificar configuraci√≥n de autenticaci√≥n
  console.log('\n5. üîê VERIFICANDO CONFIGURACI√ìN DE AUTENTICACI√ìN:')
  
  try {
    const authCallback = fs.readFileSync('app/auth/callback/page.tsx', 'utf8')
    if (authCallback.includes('localhost:3000')) {
      console.log('   ‚ùå app/auth/callback/page.tsx contiene localhost:3000')
    } else {
      console.log('   ‚úÖ app/auth/callback/page.tsx no contiene localhost:3000')
    }
  } catch (error) {
    console.log('   ‚ö†Ô∏è  No se pudo leer app/auth/callback/page.tsx')
  }

  // 6. Verificar configuraci√≥n de redirects
  console.log('\n6. üîÑ VERIFICANDO CONFIGURACI√ìN DE REDIRECTS:')
  
  try {
    const middleware = fs.readFileSync('middleware.ts', 'utf8')
    if (middleware.includes('redirect') || middleware.includes('rewrite')) {
      console.log('   ‚ö†Ô∏è  middleware.ts contiene redirects/rewrites - revisar configuraci√≥n')
    } else {
      console.log('   ‚úÖ middleware.ts no contiene redirects problem√°ticos')
    }
  } catch (error) {
    console.log('   ‚ö†Ô∏è  No se pudo leer middleware.ts')
  }

  // 7. Verificar configuraci√≥n de Vercel
  console.log('\n7. ‚öôÔ∏è VERIFICANDO CONFIGURACI√ìN DE VERCEL:')
  
  try {
    const vercelConfig = fs.readFileSync('vercel.json', 'utf8')
    if (vercelConfig.includes('localhost:3000')) {
      console.log('   ‚ùå vercel.json contiene localhost:3000')
    } else {
      console.log('   ‚úÖ vercel.json no contiene localhost:3000')
    }
  } catch (error) {
    console.log('   ‚ö†Ô∏è  No se pudo leer vercel.json')
  }

  // 8. Posibles causas adicionales
  console.log('\n8. ü§î POSIBLES CAUSAS ADICIONALES:')
  console.log('   ‚Ä¢ Cache del navegador')
  console.log('   ‚Ä¢ Service Workers')
  console.log('   ‚Ä¢ Configuraci√≥n de Supabase Auth')
  console.log('   ‚Ä¢ Variables de entorno no actualizadas en Vercel')
  console.log('   ‚Ä¢ Deployment no actualizado')
  console.log('   ‚Ä¢ Configuraci√≥n de dominio personalizado')

  // 9. Soluciones recomendadas
  console.log('\n9. üí° SOLUCIONES RECOMENDADAS:')
  console.log('   1. Verificar variables de entorno en Vercel Dashboard')
  console.log('   2. Hacer redeploy completo')
  console.log('   3. Limpiar cache del navegador')
  console.log('   4. Verificar configuraci√≥n de Supabase Auth')
  console.log('   5. Revisar logs de Vercel para errores')
  console.log('   6. Verificar que no hay redirects hardcodeados')

  console.log('\n' + '='.repeat(60))
  console.log('‚úÖ DIAGN√ìSTICO COMPLETADO')
}

diagnoseLocalhostIssue()
